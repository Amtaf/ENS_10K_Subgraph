type Domain @entity{
  id: ID!
  tokenId:BigInt!
  name:String
  labelName:String
  labelHash:Bytes
  owner:OwnerAccount!
  createdAt:BigInt!
  duration:BigInt
  expires:BigInt!
  events: [DomainEvent!]! @derivedFrom(field: "domain")


}

type OwnerAccount @entity{
  id:ID!
  address:Bytes!
  domain:[Domain!]! @derivedFrom(field: "owner")

}

interface DomainEvent {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
}

type Registration @entity {
  id: ID!
  domain: Domain!
  registrationDate: BigInt!
  expires: BigInt!
  registrant: OwnerAccount!
  cost: BigInt!
  labelName: String
  events: [RegistrationEvent!]! @derivedFrom(field: "registration")
}
interface RegistrationEvent {
  id: ID!
  registration: Registration!
  blockNumber: Int!
  transactionID: Bytes!
}

 type RegisteredName implements RegistrationEvent @entity(immutable: true){
  id:ID!
  owner:OwnerAccount!
  updateRegistry: Boolean
  cost:BigInt
  labelName:String
  name:String
  registration: Registration!
  blockNumber: Int!
  transactionID: Bytes!
  registrationDate:BigInt
  expires: BigInt!
  
}


type RenewedName implements RegistrationEvent @entity(immutable: true){
 id:ID!
 registration: Registration!
 blockNumber: Int!
 transactionID: Bytes!
 expires:BigInt!
 cost: BigInt!
 }

 type transfer implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  owner: OwnerAccount!
  oldOwner: OwnerAccount!
}

type Mint implements DomainEvent @entity {
  id: ID!
  creator: OwnerAccount
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  owner: OwnerAccount!
}

# type EthRegistrarControllerNameRegistered @entity {
#   id: ID!
#   name: String! # string
#   label: Bytes! # bytes32
#   owner: Bytes! # address
#   cost: BigInt! # uint256
#   expires: BigInt! # uint256
# }



type OwnershipTransferred @entity {
  id: ID!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
}
